# -----------------------------------------------------------
# ServiceAccount
# -----------------------------------------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
---
# -----------------------------------------------------------
# ClusterRole (permiss√µes que o metrics-server precisa)
# -----------------------------------------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
rules:
  - apiGroups: [""]
    resources: ["nodes/metrics", "pods", "nodes", "namespaces", "nodes/stats", "pods/status"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["metrics.k8s.io"]
    resources: ["*"]
    verbs: ["get", "list", "watch"]
---
# -----------------------------------------------------------
# ClusterRoleBinding (vincula SA -> ClusterRole acima)
# -----------------------------------------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
---
# -----------------------------------------------------------
# Delega√ß√£o de autentica√ß√£o para o aggregator (requerido)
# -----------------------------------------------------------
# Permite ao metrics-server delegar auth/impersonation corretamente.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
---
# L√™ o ConfigMap "extension-apiserver-authentication" em kube-system
# (necess√°rio para aggregation layer)
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
---
# -----------------------------------------------------------
# Service (exposto internamente; o APIService aponta para ele)
# -----------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  selector:
    k8s-app: metrics-server
  ports:
    - name: https
      port: 443        # Porta do Service
      targetPort: 4443 # Porta em que o container exp√µe HTTPS
---
# -----------------------------------------------------------
# Deployment (com ajustes de /tmp grav√°vel e TLS relaxado p/ ambiente local)
# -----------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      securityContext:
        runAsNonRoot: true
      containers:
        - name: metrics-server
          image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
          imagePullPolicy: IfNotPresent
          args:
            # ‚ö†Ô∏è Flags √∫teis para clusters locais (Docker Desktop/kind/Minikube)
            - --kubelet-insecure-tls
            - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP
            - --metric-resolution=15s
            - --secure-port=4443
            # üëá Corre√ß√£o do erro "read-only file system" (certificados em /tmp)
            - --cert-dir=/tmp
          ports:
            - name: https
              containerPort: 4443
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /livez
              port: https
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /readyz
              port: https
            initialDelaySeconds: 10
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false   # ‚ùó Permite escrever em /tmp
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: tmp
              mountPath: /tmp              # ‚ùó emptyDir grav√°vel
      volumes:
        - name: tmp
          emptyDir: {}
---
# -----------------------------------------------------------
# APIService (registra a API metrics.k8s.io no API Aggregator)
# -----------------------------------------------------------
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
spec:
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true  # ‚ö†Ô∏è para ambiente local; em prod prefira CA bundle
  groupPriorityMinimum: 100
  versionPriority: 100
  service:
    name: metrics-server
    namespace: kube-system
